{"version":3,"sources":["components/Message/Message.js"],"names":["TextArea","Input","formNow","date","time","Date","getTime","moment","startOf","fromNow","Comments","children","email","text","isChild","ids","undefined","onSend","style","background","actions","onClick","type","author","avatar","src","datetime","content","Editor","onChange","onSubmit","submitting","value","Item","maxLength","rows","textAlign","htmlType","loading","Message","app","useState","setLoading","setSubmitting","sendShow","setSendShow","setValue","id","setId","list","setList","useEffect","callFunction","name","data","then","res","JSON","parse","stringify","result","map","r","child","reverse","changeSend","auth","hasLoginState","message","warning","className","size","title","spinning","_id","s","width","visible","onCancel","footer","e","target","user","format","connect","state","App","React","memo"],"mappings":"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","file":"static/js/16.79dc3703.chunk.js","sourcesContent":["import './Message.less'\r\nimport React, {useEffect, useState} from \"react\";\r\nimport {Avatar, Button, Comment, Divider, Modal, Spin, Tooltip, Form, Input, message} from \"antd\";\r\nimport {EditOutlined} from \"@ant-design/icons\";\r\nimport moment from \"moment\";\r\nimport {connect} from \"react-redux\";\r\n\r\nconst {TextArea} = Input;\r\nconst formNow = date => {\r\n    const dayOne = 24 * 60 * 60 * 1000;\r\n    const time = new Date(date);\r\n    const now = new Date();\r\n    if (now.getTime() - time.getTime() > dayOne) {\r\n        return moment(date).startOf('day').fromNow();\r\n    } else {\r\n        return moment(date).startOf('minutes').fromNow();\r\n    }\r\n}\r\n\r\n\r\nconst Comments = ({children, email, text, time, isChild = true, ids = undefined, onSend}) => (\r\n    <Comment style={{background: \"white\"}}\r\n             actions={[isChild ? null : <Button onClick={() => onSend(ids)} type='link'>回复</Button>]}\r\n             author={<a>{email}</a>}\r\n             avatar={<Avatar src=\"https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png\"/>}\r\n             datetime={formNow(time)}\r\n             content={\r\n                 <p>\r\n                     {text}\r\n                 </p>\r\n             }\r\n    >\r\n        {children}\r\n    </Comment>\r\n);\r\nconst Editor = ({onChange, onSubmit, submitting, value}) => (\r\n    <>\r\n        <Form.Item>\r\n            <TextArea maxLength={50} rows={4} onChange={onChange} value={value}/>\r\n        </Form.Item>\r\n        <Form.Item style={{textAlign: \"right\"}}>\r\n            <Button htmlType=\"submit\" loading={submitting} onClick={onSubmit} type=\"primary\">\r\n                发送\r\n            </Button>\r\n        </Form.Item>\r\n    </>\r\n);\r\n\r\nfunction Message({app}) {\r\n    const [loading, setLoading] = useState(true);\r\n    const [submitting, setSubmitting] = useState(false);\r\n    const [sendShow, setSendShow] = useState(false);\r\n    const [value, setValue] = useState(\"\");\r\n    const [id, setId] = useState(undefined);\r\n    const [list, setList] = useState([]);\r\n    useEffect(() => {\r\n        if(loading){\r\n            app.callFunction({\r\n                name: \"comments\", data: {type: 'get'}\r\n            }).then((res) => {\r\n                setList(JSON.parse(JSON.stringify(res.result.data.map(r=>({...r,child:r.child.reverse()})).reverse())))\r\n                setLoading(false);\r\n            })\r\n        }\r\n    }, [loading])\r\n    const handleSubmit = () => {\r\n        if (!value) {\r\n            message.warning('请输入内容！');\r\n            return\r\n        }\r\n        setSubmitting(true);\r\n        if (id) {\r\n            app.callFunction({\r\n                name: \"comments\", data: {type: 'add',email:app.auth().hasLoginState().user.email,text:value,id,time:moment().format(\"YYYY-MM-DD HH:mm:ss\")}\r\n            }).then(() => {\r\n                setSubmitting(false);\r\n                setSendShow(false);\r\n                setValue(\"\");\r\n                setLoading(true);\r\n            })\r\n        } else {\r\n            app.callFunction({\r\n                name: \"comments\", data: {type: 'add',email:app.auth().hasLoginState().user.email,text:value,time:moment().format(\"YYYY-MM-DD HH:mm:ss\")}\r\n            }).then(() => {\r\n                setSubmitting(false);\r\n                setSendShow(false);\r\n                setValue(\"\");\r\n                setLoading(true);\r\n            })\r\n        }\r\n    }\r\n    const changeSend = (ids = undefined) => {\r\n        setId(ids);\r\n        if (app.auth().hasLoginState()) {\r\n            setSendShow(true);\r\n        } else {\r\n            message.warning('请登录后使用');\r\n        }\r\n    }\r\n    return (\r\n        <div className='Message'>\r\n            <div className=\"title\">\r\n                <Button size='large' type='link'>留言</Button>\r\n                <div className=\"right\">\r\n                    <Tooltip title=\"试试看留言功能吧\">\r\n                        <Button size='large' type='link' onClick={() => changeSend()}>点此留言<EditOutlined/></Button>\r\n                    </Tooltip>\r\n                </div>\r\n            </div>\r\n            <Divider className='fgx'/>\r\n            <Spin spinning={loading}>\r\n                <div className=\"Contents\">\r\n                    {list.map(\r\n                        r =>\r\n                            <Comments key={r._id} onSend={changeSend} email={r.email} ids={r._id} text={r.text}\r\n                                      time={r.time} isChild={false}>\r\n                                {r.child.map(s => <Comments key={s.time} email={s.email} text={s.text} time={s.time}/>)}\r\n                            </Comments>\r\n                    )}\r\n                </div>\r\n            </Spin>\r\n            <Modal\r\n                width=\"80vw\"\r\n                visible={sendShow}\r\n                title={id ? '回复评论' : '发送评论'}\r\n                onCancel={() => {\r\n                    setSendShow(false);\r\n                    setValue(\"\");\r\n                }}\r\n                footer={null}\r\n            >\r\n                <Comment\r\n                    avatar={\r\n                        <Avatar src=\"https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png\"/>\r\n                    }\r\n                    content={\r\n                        <Editor\r\n                            onChange={e => setValue(e.target.value)}\r\n                            onSubmit={handleSubmit}\r\n                            submitting={submitting}\r\n                            value={value}\r\n                        />\r\n                    }\r\n                />\r\n            </Modal>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst userInfo = state => ({app: state.App});\r\nexport default connect(userInfo, null)(React.memo(Message));\r\n"],"sourceRoot":""}