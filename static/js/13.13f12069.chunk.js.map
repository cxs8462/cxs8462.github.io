{"version":3,"sources":["views/Login/register.js"],"names":["Title","Typography","Register","history","user","useState","loading","setLoading","onFinish","e","email","password","auth","signUpWithEmailAndPassword","then","r","message","success","catch","console","log","error","goLogin","push","useEffect","hasLoginState","justify","xs","sm","md","lg","xl","className","level","defaultActiveKey","centered","TabPane","tab","name","wrapperCol","span","offset","layout","Item","rules","type","required","placeholder","prefix","allowClear","validator","_","value","length","test","Promise","resolve","reject","Error","Password","max","dependencies","hasFeedback","getFieldValue","block","htmlType","onClick","style","marginTop","labelCol","connect","state","App","React","memo"],"mappings":"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","file":"static/js/13.13f12069.chunk.js","sourcesContent":["import React, {useEffect, useState} from \"react\";\r\nimport './register.less'\r\nimport {Button, Col, Form, Input, Row, Tabs, Typography,message} from \"antd\";\r\nimport {IdcardTwoTone, LockOutlined,MailOutlined} from \"@ant-design/icons\";\r\nimport {connect} from \"react-redux\";\r\nconst { Title } = Typography;\r\n\r\nfunction Register({history,user}){\r\n    const [loading,setLoading] = useState(false);\r\n    const onFinish = e=>{\r\n        setLoading(true)\r\n        const {email, password} = e\r\n        user.auth().signUpWithEmailAndPassword(email, password)\r\n            .then((r) => {\r\n                message.success('发送邮件成功！请前往邮箱继续')\r\n                setLoading(false)\r\n                // 发送验证邮件成功\r\n            }).catch(r=>{\r\n                console.log('err',r.message)\r\n            message.error('邮箱已被注册或者邮箱有误！')\r\n            setLoading(false)\r\n        });\r\n    }\r\n    const goLogin = ()=>{\r\n        history.push('/login');\r\n    }\r\n    const goIndex = ()=>{\r\n        history.push('/')\r\n    }\r\n    useEffect(()=>{\r\n        if(user.auth().hasLoginState())\r\n            goIndex();\r\n    },[])\r\n    return (\r\n        <Row justify=\"center\">\r\n            <Col xs={0} sm={16} md={12} lg={12} xl={8}>\r\n                <div className='register'>\r\n                    <div className=\"loginBox\">\r\n                        <Title level={3}>New User</Title>\r\n                        <Tabs defaultActiveKey=\"1\" centered>\r\n                            <Tabs.TabPane tab={<span><IdcardTwoTone />注册</span>} key=\"1\">\r\n                                <Form\r\n                                    name=\"user\"\r\n                                    wrapperCol={{ span: 16,offset:4 }}\r\n                                    layout='Vertical'\r\n                                    onFinish={onFinish}\r\n                                >\r\n                                    <Form.Item\r\n                                        name=\"email\"\r\n                                        rules={[\r\n                                            {\r\n                                                type: 'email',\r\n                                                message: '邮箱格式有误!',\r\n                                            },\r\n                                            {\r\n                                                required: true,\r\n                                                message: '请输入邮箱!',\r\n                                            },\r\n                                        ]}\r\n                                    >\r\n                                        <Input placeholder='邮箱' prefix={<MailOutlined />} allowClear/>\r\n                                    </Form.Item>\r\n                                    <Form.Item\r\n                                        name=\"password\"\r\n                                        rules={[{ required: true, message: '请输入密码!' },() => ({\r\n                                            validator(_, value) {\r\n                                                if (value.length>=8 && /^(?![0-9]+$)(?![a-zA-Z]+$)[0-9A-Za-z]{6,16}$/.test(value)) {\r\n                                                    return Promise.resolve();\r\n                                                }\r\n                                                return Promise.reject(new Error('密码格式不正确!'));\r\n                                            },\r\n                                        })]}\r\n                                    >\r\n                                        <Input.Password max={32} placeholder='密码' prefix={<LockOutlined />} allowClear/>\r\n                                    </Form.Item>\r\n                                    <Form.Item\r\n                                        name=\"qrmm\"\r\n                                        dependencies={['password']}\r\n                                        hasFeedback\r\n                                        rules={[\r\n                                            {\r\n                                                required: true,\r\n                                                message: '请再次输入密码!',\r\n                                            },\r\n                                            ({ getFieldValue }) => ({\r\n                                                validator(_, value) {\r\n                                                    if (!value || getFieldValue('password') === value) {\r\n                                                        return Promise.resolve();\r\n                                                    }\r\n                                                    return Promise.reject(new Error('两次密码不一致!'));\r\n                                                },\r\n                                            }),\r\n                                        ]}\r\n                                    >\r\n                                        <Input.Password prefix={<LockOutlined />} placeholder='重复密码' allowClear/>\r\n                                    </Form.Item>\r\n                                    <Form.Item>\r\n                                        <Button loading={loading} block type=\"primary\" htmlType=\"submit\">\r\n                                            注册\r\n                                        </Button>\r\n                                        <Button onClick={goLogin} style={{marginTop:'10px'}} block>\r\n                                            返回\r\n                                        </Button>\r\n                                    </Form.Item>\r\n                                </Form>\r\n                            </Tabs.TabPane>\r\n                        </Tabs>\r\n                    </div>\r\n                </div>\r\n            </Col>\r\n            <Col xs={24} sm={0} md={0} lg={0} xl={0}>\r\n                <div className='Login'>\r\n                    <div className=\"loginBoxPhone\">\r\n                        <Title level={3}>New User</Title>\r\n                        <Tabs defaultActiveKey=\"1\" centered>\r\n                            <Tabs.TabPane tab={<span><IdcardTwoTone />注册</span>} key=\"1\">\r\n                                <Form\r\n                                    name=\"user\"\r\n                                    labelCol={{ span: 8 }}\r\n                                    wrapperCol={{ span: 16,offset:0 }}\r\n                                    layout='Vertical'\r\n                                    onFinish={onFinish}\r\n                                >\r\n                                    <Form.Item\r\n                                        name=\"email\"\r\n                                        rules={[\r\n                                            {\r\n                                                type: 'email',\r\n                                                message: '邮箱格式有误!',\r\n                                            },\r\n                                            {\r\n                                                required: true,\r\n                                                message: '请输入邮箱!',\r\n                                            },\r\n                                        ]}\r\n                                    >\r\n                                        <Input placeholder='邮箱' prefix={<MailOutlined />} allowClear/>\r\n                                    </Form.Item>\r\n                                    <Form.Item\r\n                                        name=\"password\"\r\n                                        rules={[{ required: true, message: '请输入密码!' },() => ({\r\n                                            validator(_, value) {\r\n                                                if (value.length>=8 && /^(?![0-9]+$)(?![a-zA-Z]+$)[0-9A-Za-z]{6,16}$/.test(value)) {\r\n                                                    return Promise.resolve();\r\n                                                }\r\n                                                return Promise.reject(new Error('密码格式不正确!'));\r\n                                            },\r\n                                        })]}\r\n                                    >\r\n                                        <Input.Password max={32} placeholder='密码' prefix={<LockOutlined />} allowClear/>\r\n                                    </Form.Item>\r\n                                    <Form.Item\r\n                                        name=\"qrmm\"\r\n                                        dependencies={['password']}\r\n                                        hasFeedback\r\n                                        rules={[\r\n                                            {\r\n                                                required: true,\r\n                                                message: '请再次输入密码!',\r\n                                            },\r\n                                            ({ getFieldValue }) => ({\r\n                                                validator(_, value) {\r\n                                                    if (!value || getFieldValue('password') === value) {\r\n                                                        return Promise.resolve();\r\n                                                    }\r\n                                                    return Promise.reject(new Error('两次密码不一致!'));\r\n                                                },\r\n                                            }),\r\n                                        ]}\r\n                                    >\r\n                                        <Input.Password prefix={<LockOutlined />} placeholder='重复密码' allowClear/>\r\n                                    </Form.Item>\r\n                                    <Form.Item>\r\n                                        <Button loading={loading} block type=\"primary\" htmlType=\"submit\">\r\n                                            注册\r\n                                        </Button>\r\n                                        <Button onClick={goLogin} style={{marginTop:'10px'}} block>\r\n                                            返回\r\n                                        </Button>\r\n                                    </Form.Item>\r\n                                </Form>\r\n                            </Tabs.TabPane>\r\n                        </Tabs>\r\n                    </div>\r\n                </div>\r\n            </Col>\r\n        </Row>\r\n    )\r\n}\r\n\r\nconst mapState = state=>({user:state.App})\r\n\r\nexport default connect(mapState,null)(React.memo(Register))\r\n"],"sourceRoot":""}